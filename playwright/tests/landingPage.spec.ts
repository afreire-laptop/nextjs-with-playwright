import { test, expect } from "../support/test";

test.describe("Landing Page Tests", () => {
  test.beforeEach(async ({ page }) => {
    await page.goto("/");
  });

  test("should display the correct title and meta tags", async ({ page }) => {
    await expect(page).toHaveTitle("Create Next App");
    const description = await page
      .locator('meta[name="description"]')
      .getAttribute("content");
    expect(description).toBe("Generated by create next app");
  });

  test("should render the Next.js logo", async ({ page }) => {
    const logo = page.locator('img[alt="Next.js logo"]');
    await expect(logo).toBeVisible();
    await expect(logo).toHaveAttribute("src", "/next.svg");
  });

  test("should display the list of steps", async ({ page }) => {
    const listItems = page.locator("ol > li");
    await expect(listItems).toHaveCount(2);
    await expect(listItems.nth(0)).toContainText(
      "Get started by editing src/pages/index.tsx.",
    );
    await expect(listItems.nth(1)).toContainText(
      "Save and see your changes instantly.",
    );
  });

  test("should have functional CTA buttons", async ({ page }) => {
    const deployNowLink = page.locator('a[href*="vercel.com/new"]');
    const readDocsLink = page.locator('a[href*="nextjs.org/docs"]');

    await expect(deployNowLink).toBeVisible();
    await expect(deployNowLink).toHaveAttribute("target", "_blank");

    await expect(readDocsLink).toBeVisible();
    await expect(readDocsLink).toHaveAttribute("target", "_blank");
  });

  test("should render the footer links", async ({ page }) => {
    const footerLinks = page.locator("footer a");

    await expect(footerLinks).toHaveCount(3);
    await expect(footerLinks.nth(0)).toHaveAttribute(
      "href",
      expect.stringContaining("nextjs.org/learn"),
    );
    await expect(footerLinks.nth(1)).toHaveAttribute(
      "href",
      expect.stringContaining("vercel.com/templates"),
    );
    await expect(footerLinks.nth(2)).toHaveAttribute(
      "href",
      expect.stringContaining("nextjs.org"),
    );
  });

  test("should have accessible alt text for all footer images", async ({
    page,
  }) => {
    const footerImages = page.locator("footer img");

    await expect(footerImages).toHaveCount(3);
    await expect(footerImages.nth(0)).toHaveAttribute("alt", "File icon");
    await expect(footerImages.nth(1)).toHaveAttribute("alt", "Window icon");
    await expect(footerImages.nth(2)).toHaveAttribute("alt", "Globe icon");
  });
});
